-- Martil Auto Joiner Bootyyy

local CoreGui = game:GetService("CoreGui")

local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Parent = CoreGui

-- Main Frame
local MainFrame = Instance.new("Frame")
MainFrame.Size = UDim2.new(0, 400, 0, 250)
MainFrame.Position = UDim2.new(0.5, -200, 0.5, -125)
MainFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
MainFrame.BorderSizePixel = 0
MainFrame.Active = true
MainFrame.Draggable = true
MainFrame.Parent = ScreenGui
-- Rounded corners
local UICorner = Instance.new("UICorner")
UICorner.CornerRadius = UDim.new(0, 12)
UICorner.Parent = MainFrame

-- Drop shadow
local Shadow = Instance.new("ImageLabel")
Shadow.Size = UDim2.new(1, 30, 1, 30)
Shadow.Position = UDim2.new(0, -15, 0, -15)
Shadow.BackgroundTransparency = 1
Shadow.Image = "rbxassetid://1316045217"
Shadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
Shadow.ImageTransparency = 0.5
Shadow.ScaleType = Enum.ScaleType.Slice
Shadow.SliceCenter = Rect.new(10,10,118,118)
Shadow.ZIndex = -1
Shadow.Parent = MainFrame

-- Title Bar
local Title = Instance.new("TextLabel")
Title.Size = UDim2.new(1, -20, 0, 40)
Title.Position = UDim2.new(0, 10, 0, 0)
Title.BackgroundTransparency = 1
Title.Text = "Martil Auto Joiner Bootyyy"
Title.TextColor3 = Color3.fromRGB(255, 255, 255)
Title.Font = Enum.Font.GothamBold
Title.TextSize = 20
Title.TextXAlignment = Enum.TextXAlignment.Left
Title.Parent = MainFrame

-- Divider
local Divider = Instance.new("Frame")
Divider.Size = UDim2.new(1, -20, 0, 1)
Divider.Position = UDim2.new(0, 10, 0, 42)
Divider.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
Divider.BorderSizePixel = 0
Divider.Parent = MainFrame

-- Sidebar
local Sidebar = Instance.new("Frame")
Sidebar.Size = UDim2.new(0, 120, 1, -50)
Sidebar.Position = UDim2.new(0, 0, 0, 50)
Sidebar.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
Sidebar.BorderSizePixel = 0
Sidebar.Parent = MainFrame

local SideUICorner = Instance.new("UICorner")
SideUICorner.CornerRadius = UDim.new(0, 12)
SideUICorner.Parent = Sidebar

-- Sidebar button
local SideButton = Instance.new("TextButton")
SideButton.Size = UDim2.new(1, -10, 0, 40)
SideButton.Position = UDim2.new(0, 5, 0, 10)
SideButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
SideButton.Text = "Main"
SideButton.TextColor3 = Color3.fromRGB(255, 255, 255)
SideButton.Font = Enum.Font.Gotham
SideButton.TextSize = 16
SideButton.Parent = Sidebar

local SideCorner = Instance.new("UICorner")
SideCorner.CornerRadius = UDim.new(0, 8)
SideCorner.Parent = SideButton

-- Content Frame
local ContentFrame = Instance.new("Frame")
ContentFrame.Size = UDim2.new(1, -130, 1, -60)
ContentFrame.Position = UDim2.new(0, 130, 0, 60)
ContentFrame.BackgroundTransparency = 1
ContentFrame.Parent = MainFrame

-- Toggle Text
local ToggleText = Instance.new("TextLabel")
ToggleText.Size = UDim2.new(0.7, 0, 0, 30)
ToggleText.Position = UDim2.new(0, 0, 0, 0)
ToggleText.BackgroundTransparency = 1
ToggleText.Text = "Start Joiner"
ToggleText.TextColor3 = Color3.fromRGB(255, 255, 255)
ToggleText.Font = Enum.Font.Gotham
ToggleText.TextSize = 16
ToggleText.TextXAlignment = Enum.TextXAlignment.Left
ToggleText.Parent = ContentFrame

-- Toggle Button
local ToggleButton = Instance.new("TextButton")
ToggleButton.Size = UDim2.new(0, 70, 0, 30)
ToggleButton.Position = UDim2.new(1, -80, 0, 0)
ToggleButton.BackgroundColor3 = Color3.fromRGB(170, 0, 0)
ToggleButton.Text = "OFF"
ToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
ToggleButton.Font = Enum.Font.GothamBold
ToggleButton.TextSize = 14
ToggleButton.Parent = ContentFrame

local BtnCorner = Instance.new("UICorner")
BtnCorner.CornerRadius = UDim.new(0, 8)
BtnCorner.Parent = ToggleButton

-- // KEYBIND SYSTEM (unchanged visuals/behavior)
local UserInputService = game:GetService("UserInputService")
local toggleKey = Enum.KeyCode.RightShift
local waitingForKey = false

local KeybindButton = Instance.new("TextButton")
KeybindButton.Size = UDim2.new(0, 150, 0, 30)
KeybindButton.Position = UDim2.new(0, 0, 0, 50)
KeybindButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
KeybindButton.Text = "Keybind: " .. toggleKey.Name
KeybindButton.TextColor3 = Color3.fromRGB(255, 255, 255)
KeybindButton.Font = Enum.Font.GothamBold
KeybindButton.TextSize = 14
KeybindButton.AutoButtonColor = true
KeybindButton.Parent = ContentFrame

local KeybindCorner = Instance.new("UICorner")
KeybindCorner.CornerRadius = UDim.new(0, 8)
KeybindCorner.Parent = KeybindButton

KeybindButton.MouseButton1Click:Connect(function()
    if waitingForKey then return end
    waitingForKey = true
    local oldText = KeybindButton.Text
    KeybindButton.Text = "Press a key..."

    local conn
    conn = UserInputService.InputBegan:Connect(function(input, gp)
        if input.UserInputType ~= Enum.UserInputType.Keyboard then return end
        if gp or UserInputService:GetFocusedTextBox() then return end
        toggleKey = input.KeyCode
        KeybindButton.Text = "Keybind: " .. toggleKey.Name
        waitingForKey = false
        if conn then conn:Disconnect() end
    end)

    task.delay(5, function()
        if waitingForKey then
            waitingForKey = false
            KeybindButton.Text = oldText
            if conn then conn:Disconnect() end
        end
    end)
end)

UserInputService.InputBegan:Connect(function(input, gp)
    if input.UserInputType ~= Enum.UserInputType.Keyboard then return end
    if gp or UserInputService:GetFocusedTextBox() then return end
    if input.KeyCode == toggleKey then
        ScreenGui.Enabled = not ScreenGui.Enabled
    end
end)
-- // END KEYBIND SYSTEM

-- =========================
--  AUTO JOINER (exact flow)
-- =========================
repeat task.wait() until game:IsLoaded()

local WebSocketURL = "ws://127.0.0.1:51948" -- поменяй порт если ты его поменял в питоне
local running = false
local ws = nil
local wsMsgConn, wsCloseConn = nil, nil
local reconnecting = false
local reconnectThread = nil

local function prints(str)
    print("[AutoJoiner]: " .. str)
end

local function findTargetGui()
    -- EXACT: look for CoreGui -> ScreenGui named 'Orion'
    for _, gui in ipairs(game:GetService("CoreGui"):GetDescendants()) do
        if gui:IsA("ScreenGui") and gui.Name == "Orion" then
            return gui
        end
    end
    return nil
end

local function setJobIDText(targetGui, text)
    -- EXACT: find TextLabel == 'Job-ID Input', then dive to TextBox and set text
    for _, descendant in ipairs(targetGui:GetDescendants()) do
        if descendant:IsA("TextLabel") and descendant.Text == "Job-ID Input" then
            local parentFrame = descendant.Parent
            if not parentFrame:IsA("Frame") then
                continue
            end
            for _, frameChild in ipairs(parentFrame:GetChildren()) do
                if frameChild:IsA("Frame") then
                    local textBox = frameChild:FindFirstChildOfClass("TextBox")
                    if textBox then
                        textBox.Text = text
                        textBox:CaptureFocus()
                        textBox:ReleaseFocus()
                        prints("Textbox updated: " .. text .. " (10m+ bypass)")
                        return textBox
                    end
                end
            end
        end
    end
    return nil
end

local function clickJoinButton(targetGui)
    -- EXACT: find TextLabel == 'Join Job-ID' and its sibling TextButton
    for _, descendant in ipairs(targetGui:GetDescendants()) do
        if descendant:IsA("TextLabel") and descendant.Text == "Join Job-ID" then
            local parentFrame = descendant.Parent
            return parentFrame:FindFirstChildOfClass("TextButton")
        end
    end
    return nil
end

local function bypass10M(jobId)
    local targetGui = findTargetGui()
    if not targetGui then
        prints("Target GUI 'Orion' not found yet, retrying shortly...")
        -- tiny delay + retry to let UI finish building
        task.delay(0.25, function()
            local again = findTargetGui()
            if again then
                bypass10M(jobId)
            end
        end)
        return
    end

    setJobIDText(targetGui, jobId)
    local button = clickJoinButton(targetGui)
    if not button then
        prints("Join button not found. Make sure 'Join Job-ID' is on screen.")
        return
    end

    local upConnections = getconnections and getconnections(button.MouseButton1Up) or {}
    task.defer(function()
        task.wait(0.006)
        for _, conn in ipairs(upConnections) do
            if conn and conn.Fire then
                conn:Fire()
            end
        end
        prints("Join server clicked (10m+ bypass)")
    end)
end

local function justJoin(scriptSrc)
    local func, err = loadstring(scriptSrc)
    if func then
        local ok, result = pcall(func)
        if not ok then
            prints("Error while executing script: " .. tostring(result))
        end
    else
        prints("Some unexpected error: " .. tostring(err))
    end
end

local function disconnectWS()
    if wsMsgConn then wsMsgConn:Disconnect() wsMsgConn = nil end
    if wsCloseConn then wsCloseConn:Disconnect() wsCloseConn = nil end
    if ws then
        pcall(function() ws:Close() end)
        ws = nil
    end
end

local function connectOnce()
    prints("Trying to connect to " .. WebSocketURL)
    local success, socket = pcall(function()
        return WebSocket and WebSocket.connect and WebSocket.connect(WebSocketURL)
    end)

    if success and socket then
        prints("Connected to WebSocket")
        ws = socket

        wsMsgConn = ws.OnMessage:Connect(function(msg)
            if not string.find(msg, "TeleportService") then
                prints("Bypassing 10m server: " .. msg)
                bypass10M(msg)
            else
                prints("Running the script: " .. msg)
                justJoin(msg)
            end
        end)

        wsCloseConn = ws.OnClose:Connect(function()
            if running then
                prints("The websocket closed, trying to reconnect...")
                disconnectWS()
                -- allow outer loop to reconnect
            end
        end)

        return true
    else
        prints("Unable to connect to websocket, retrying..")
        return false
    end
end

local function startJoiner()
    if running then return end
    running = true

    reconnectThread = task.spawn(function()
        while running do
            if not ws then
                connectOnce()
            end
            -- keep the loop light
            for _ = 1, 20 do
                if not running then break end
                task.wait(0.1)
            end
        end
        -- cleanup when leaving loop
        disconnectWS()
    end)
end

local function stopJoiner()
    if not running then return end
    running = false
    disconnectWS()
    if reconnectThread then
        task.cancel(reconnectThread)
        reconnectThread = nil
    end
    prints("Joiner stopped")
end

-- Toggle Logic (no visual changes)
ToggleButton.MouseButton1Click:Connect(function()
    if not running then
        ToggleButton.Text = "ON"
        ToggleButton.BackgroundColor3 = Color3.fromRGB(0, 170, 0)
        startJoiner()
    else
        ToggleButton.Text = "OFF"
        ToggleButton.BackgroundColor3 = Color3.fromRGB(170, 0, 0)
        stopJoiner()
    end
end)
